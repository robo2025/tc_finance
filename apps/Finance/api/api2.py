from rest_framework.decorators import detail_route, list_routefrom functools import reducefrom FSys.config.extra import SUPPLIER_API_HOSTfrom core.decorator.response import Core_connectorfrom utils.exceptions import PubErrorCustomfrom core.http.request import send_requestfrom auth.authentication import AdminUserAuthenticationfrom apps.Finance.Custom.mixins import (                    GenericViewSetCustom)from apps.Finance.Custom.com_method import timestamp_to_datetime,list_map_reducefrom apps.Finance.plan_model import PlanOrderfrom apps.Finance.order_model import OrderDetailfrom apps.Finance.models import (					FReceiptListDetail,					FReceiptList,					FReceipt,                    AccTermRule,AccTermAction,Statement,Settlement,StatementDetail,SettlementList)from apps.Finance.Custom.serializers import (					NoFRceiptSerializer,					YesFRceiptSerializer,					FReceiptListDetailSerializer,					FReceiptListSerializer,					FReceiptSerializer,					FINReceiptListDetailSerializer,					FINReceiptListSerializer,					FINReceiptSerializer,					NoFinanceReceiptSerializer,					FinanceReceiptDetailSerializer1,					FinanceReceiptDetailSerializer,                    FinanceReceiptCommissionSerializer,                    AccTermRuleSerializer,                    AccTermActionSerializer,                    AccTermActionSerializer1,                    SettlementListSerializer,                    SettlementListCommissionSerializer,StatementDetailSerializer1,SettlementListPaySerializer)from apps.Finance.utils import (					set_receiptl_info,					noticket_query,					yesticket_query,					nogoodsticket_query,					get_FA_DD_TH,					run_FA_DD_TH,					receipt_confirm_ex,					yesgoodsticket_query,                    get_orders_obj,                    SettlementHandleGoods,SettlementHandleCommission)class CommissionTicket(GenericViewSetCustom):    @Core_connector(pagination=True)    def list(self,request):        is_type = self.request.query_params.get('is_type', '3')        if str(is_type) != '1' and str(is_type) != '2':            raise PubErrorCustom("is_type有误！")        where_sql = str()        params = list()        code = self.request.query_params.get('code', None)        supplier_id = self.request.query_params.get('supplier_id', None)        start_dt = self.request.query_params.get('start_dt', None)        end_dt = self.request.query_params.get('end_dt', None)        order_code = self.request.query_params.get('order_code', None)        limit = self.request.query_params.get('ym', None)        start_limit = self.request.query_params.get('start_ym', None)        end_limit = self.request.query_params.get('end_ym', None)        if code:            where_sql = "{} and LOCATE(%s,t2.code)>0".format(where_sql)            params.append(code)        if order_code:            where_sql = "{} and LOCATE(%s,t1.use_code)>0".format(where_sql)            params.append(order_code)        if limit :            limit=limit.replace('-','')            where_sql = "{} and t2.limit=%s".format(where_sql)            params.append(limit)        if supplier_id and str(supplier_id) != 'all' and str(supplier_id) != '0':            where_sql = "{} and t2.supplier_id = %s".format(where_sql)            params.append(supplier_id)        if start_dt and end_dt and end_dt >= start_dt:            where_sql = "{} and ( (substr(t1.use_code,1,2)='FA' and t1.refund_date >= %s  and t1.refund_date <= %s ) or  \                           (substr(t1.use_code,1,2)!='FA' and t1.order_date >= %s  and t1.order_date <= %s )  )".format(                where_sql)            params.append(start_dt)            params.append(end_dt)            params.append(start_dt)            params.append(end_dt)        if start_limit and end_limit and end_limit >= start_limit:            start_limit=start_limit.replace('-','')            end_limit=end_limit.replace('-','')            where_sql = "{} and t2.limit >=%s and t2.limit <=%s ".format(where_sql)            params.append(start_limit)            params.append(end_limit)        if str(is_type)=='1':             return {'data': NoFRceiptSerializer(noticket_query(where_sql=where_sql,params=params), many=True).data}        elif str(is_type)=='2':            return {'data': YesFRceiptSerializer(yesticket_query(where_sql=where_sql,params=params), many=True).data}    @Core_connector()    def retrieve(self, request, *args, **kwargs):        pk = kwargs.get('pk', "")        assert pk, "发票编号空！"        class test():            def __init__(self,receipt_sn):                self.receipt_sn=receipt_sn        test=test(pk)        data=FinanceReceiptCommissionSerializer(test).data        return {"data":data}    @list_route(methods=['PUT'])    @Core_connector(transaction=True)    def ready(self, request):        orders = self.request.data.get('orders', None)        if not orders: raise PubErrorCustom("订单号为空！")        obj = noticket_query(" and t1.use_code in %s", [orders])        if not len(obj): raise PubErrorCustom("选择的开票信息有误，请重新选择！")        DD = run_FA_DD_TH(orders)        for obj_item in obj:            for item in DD:                if item.order_code==obj_item.use_code:                    obj_item.tax_number = item.tax_number                    obj_item.tax_number = item.tax_number                    obj_item.title = item.title                    obj_item.company_address = item.company_address                    obj_item.telephone = item.telephone                    obj_item.bank = item.bank                    obj_item.account = item.account                    obj_item.receipt_type = item.receipt_type                    obj_item.guest_company_name = item.guest_company_name        data=set_receiptl_info(request, obj,2)        return {'data': {            'title': FINReceiptSerializer(data['title'], many=False).data,            'goods_merge': FINReceiptListSerializer(data['goods_merge'], many=True).data,            'goods_list': FINReceiptListDetailSerializer(data['goods'], many=True).data, }        }    @list_route(methods=['PUT'])    @Core_connector(transaction=True)    def run(self, request):        receipt_confirm_ex(request,2)        return {"data": []}class TicketViewset(GenericViewSetCustom):    authentication_classes = [AdminUserAuthentication]    filters_custom = [        {'key': "date", 'condition': "gte", 'inkey': 'start_dt' },        {'key': "date", 'condition': "lte", 'inkey': 'end_dt'},        {'key': "supplier_name", 'all_query':True,},        {'key': 'order_code','condition':'like'},        {'key':'tax_number','condition':'like',},        {'key':'title','conditino':'like'}    ]    @Core_connector(pagination=True)    def list(self, request):        is_type = self.request.query_params.get('is_type', '3')        if str(is_type) == '1':            obj, obj_FA = get_orders_obj(FA_flag=True, DD_flag=True, TH_flag=True, DD_status=[6], TH_status=[14], FA_status=[5, 6, 7],FA_params=[],DD_params=[],TH_params=[])            return {'data': NoFinanceReceiptSerializer(nogoodsticket_query(obj,obj_FA), many=True).data}        elif str(is_type) == '2':            return {'data': FinanceReceiptDetailSerializer1(yesgoodsticket_query(), many=True).data}        else:            raise PubErrorCustom("is_type有误！")    @Core_connector()    def retrieve(self, request, *args, **kwargs):        pk = kwargs.get('pk', "")        assert pk, "发票编号空！"        class test():            def __init__(self,receipt_sn):                self.receipt_sn=receipt_sn        test=test(pk)        data=FinanceReceiptDetailSerializer(test).data        if not len(data['goods_list']):            data.pop('goods_list')        return {"data":data}    @list_route(methods=['PUT'])    @Core_connector(transaction=True)    def ready(self, request):        orders = self.request.data.get('orders', None)        if not orders:            raise PubErrorCustom("订单号为空！")        FA, DD, TH=get_FA_DD_TH(orders)        if not len(FA) and not len(DD) and not len(TH):            raise PubErrorCustom("请勾选订单！")        if (len(FA) and (len(DD) or len(TH))) or (len(FA)>1):            raise PubErrorCustom("方案订单只能单订单开票！")        FA_where_sql=""        FA_params=[]        FA_flag=False        DD_where_sql=""        DD_params=[]        DD_flag=False        TH_where_sql=""        TH_params=[]        TH_flag=False        if len(FA):            FA_where_sql+=" and t1.plan_order_sn in %s"            FA_params.append(FA)            FA_flag=True        if len(DD):            DD_where_sql += " and t1.son_order_sn in %s"            DD_params.append(DD)            DD_flag=True        if len(TH):            TH_where_sql += " and t5.returns_sn in %s"            TH_params.append(TH)            TH_flag=True        order_obj,order_obj_FA=get_orders_obj(FA_flag=FA_flag,DD_flag=DD_flag,TH_flag=TH_flag,FA_where_sql=FA_where_sql,                                                FA_params=FA_params,DD_where_sql=DD_where_sql,DD_params=DD_params,TH_where_sql=TH_where_sql,TH_params=TH_params,                                                     DD_status = [6], TH_status = [14], FA_status = [5, 6, 7])        data = set_receiptl_info(request, nogoodsticket_query(order_obj,order_obj_FA),1)        if not FA:            return {'data': {                'title': FINReceiptSerializer(data['title'], many=False).data,                'goods_merge': FINReceiptListSerializer(data['goods_merge'], many=True).data,                'goods_list': FINReceiptListDetailSerializer(data['goods'], many=True).data,}            }        else:            return {'data': {                'title': FINReceiptSerializer(data['title'], many=False).data,                'goods_merge': FINReceiptListSerializer(data['goods_merge'], many=True).data,}            }    @list_route(methods=['PUT'])    @Core_connector(transaction=True)    def run(self, request):        receipt_confirm_ex(request)        return {"data": []}    @list_route(methods=['GET'])    @Core_connector()    def all_guestname(self, request, *args, **kwargs):        """获取用户列表"""        guest_info = set()        order_details = OrderDetail.objects.using('order').filter()        if order_details.exists():            for order_detail in order_details:                guest_info.add(order_detail.supplier_name)        plan_orders= PlanOrder.objects.using('plan_order').filter()        if plan_orders.exists():            for item in plan_orders:                guest_info.add(item.supplier_name)        guest_info = list(guest_info)        data = {            'guest_info': guest_info        }        return {'data':data}class AccTermRuleViewset(GenericViewSetCustom):    @Core_connector(pagination=True)    def list(self,request):        return {'data':AccTermRuleSerializer(AccTermRule.objects.all(),many=True).data}    @Core_connector(transaction=True,serializer_class=AccTermRuleSerializer,model_class=AccTermRule)    def create(self,request,*args,**kwargs):        serializer = kwargs.pop('serializer')        serializer.save()        return []    @Core_connector(transaction=True,serializer_class=AccTermRuleSerializer,model_class=AccTermRule)    def update(self,request,*args,**kwargs):        serializer = kwargs.pop('serializer')        serializer.save()        return []    @Core_connector(transaction=True)    def destroy(self, request, *args, **kwargs):        codes=self.request.data.get("codes",None)        if not codes:            raise PubErrorCustom("请勾选数据！")        AccTermRule.objects.filter(code__in=codes).delete()        return []class AccTermActionViewset(GenericViewSetCustom):    @Core_connector(pagination=True)    def list(self,request):        is_type=self.request.query_params.get('is_type',None)        if not is_type or (str(is_type) !='1' and str(is_type) !='2'):            raise PubErrorCustom("is_type 错误！")        if str(is_type)=='1':            obj=Statement.objects.filter().values('supplier_id').distinct()            if obj.exists():                supplier_ids = [ item['supplier_id'] for item in obj ]                r=send_request(url="{}/service/suppliers".format(SUPPLIER_API_HOST),params={'user_ids':supplier_ids},token=None)                if r[0]:                        func=lambda x:"{}年{}月{}日".format(x[:4],x[5:7],x[8:10])                        data=[ {'create_time':func(timestamp_to_datetime(item['created_time'])),'supplier_id':k,'supplier_name':item['username']} for k,item in r[1].items()  ]                        return {"data":data}            return []        else:            obj=AccTermAction.objects.raw("""                    SELECT *,t2.name,t2.day,t2.id as id                    FROM acctermaction as t1                    INNER JOIN acctermrule as t2 ON t1.code=t2.code            """)            return AccTermActionSerializer1(obj,many=True).data    @Core_connector(transaction=True,serializer_class=AccTermActionSerializer,model_class=AccTermAction)    def create(self,request,*args,**kwargs):        serializer = kwargs.pop('serializer')        serializer.save()        return []    @Core_connector(transaction=True,serializer_class=AccTermActionSerializer,model_class=AccTermAction)    def update(self,request,*args,**kwargs):        serializer = kwargs.pop('serializer')        serializer.save()        return []class SettlementViewset(GenericViewSetCustom,SettlementHandleGoods):    @Core_connector(pagination=True)    def list(self,request,*args,**kwargs):        where_sql=str()        params=list()        supplier_id=self.request.query_params.get('supplier_id',None)        start_ym=self.request.query_params.get('start_ym',None)        end_ym=self.request.query_params.get('end_ym',None)        code = self.request.query_params.get('code',None)        status = self.request.query_params.get('status',None)        if code:            where_sql = "{} and LOCATE(%s,t1.code)>0".format(where_sql)            params.append(code)        if supplier_id and str(supplier_id) != 'all' and str(supplier_id) != '0':            where_sql = "{} and t1.supplier_id = %s".format(where_sql)            params.append(supplier_id)        if start_ym and end_ym and end_ym >= start_ym:            start_ym = start_ym.replace('-', '')            end_ym = end_ym.replace('-', '')            where_sql = "{} and t1.limit >=%s and t1.limit <=%s ".format(where_sql)            params.append(start_ym)            params.append(end_ym)        if  str(status)=='1' :            self.no_ticket_query(where_sql,params)        elif str(status)=='2':            self.yes_ticket_query(where_sql,params)        else:            raise PubErrorCustom("查询标志有误！")        return {'data':SettlementListSerializer(self.data,many=True).data}    @Core_connector(transaction=True)    def create(self,request,*args,**kwargs):        self.settlement(self.request.data)        return []    @Core_connector()    def retrieve(self, request, *args, **kwargs):        return {'data':StatementDetailSerializer1(StatementDetail.objects.filter(code=kwargs.get('pk')).order_by('-order_date'),many=True).data}    @list_route(methods=['GET'])    @Core_connector(pagination=True)    def paylist(self,request,*args,**kwargs):        where_sql=str()        params=list()        supplier_id=self.request.query_params.get('supplier_id',None)        start_dt=self.request.query_params.get('start_dt',None)        end_dt=self.request.query_params.get('end_dt',None)        if supplier_id and str(supplier_id) != 'all' and str(supplier_id) != '0':            where_sql = "{} and t2.supplier_id = %s".format(where_sql)            params.append(supplier_id)        if start_dt and end_dt and end_dt >= start_dt:            where_sql = "{} and substr(t1.create_time,1,10) >=%s and substr(t1.create_time,1,10) <=%s ".format(where_sql)            params.append(start_dt)            params.append(end_dt)        self.payquery(where_sql,params)        return {'data':SettlementListPaySerializer(self.data,many=True).data}class SettlementCommissionViewset(GenericViewSetCustom,SettlementHandleCommission):    @Core_connector(pagination=True)    def list(self, request, *args, **kwargs):        where_sql = str()        params = list()        supplier_id = self.request.query_params.get('supplier_id', None)        start_ym = self.request.query_params.get('start_ym', None)        end_ym = self.request.query_params.get('end_ym', None)        code = self.request.query_params.get('code', None)        if code:            where_sql = "{} and LOCATE(%s,t1.code)>0".format(where_sql)            params.append(code)        if supplier_id and str(supplier_id) != 'all' and str(supplier_id) != '0':            where_sql = "{} and t1.supplier_id = %s".format(where_sql)            params.append(supplier_id)        if start_ym and end_ym and end_ym >= start_ym:            start_ym = start_ym.replace('-', '')            end_ym = end_ym.replace('-', '')            where_sql = "{} and t1.limit >=%s and t1.limit <=%s ".format(where_sql)            params.append(start_ym)            params.append(end_ym)        self.query(where_sql, params)        return {'data': SettlementListCommissionSerializer(self.data, many=True).data}    @Core_connector()    def retrieve(self, request, *args, **kwargs):        return {'data':StatementDetailSerializer1(StatementDetail.objects.filter(code=kwargs.get('pk')).order_by('-order_date'),many=True).data}    @list_route(methods=['GET'])    @Core_connector(pagination=True)    def paylist(self,request,*args,**kwargs):        where_sql=str()        params=list()        supplier_id=self.request.query_params.get('supplier_id',None)        start_dt=self.request.query_params.get('start_dt',None)        end_dt=self.request.query_params.get('end_dt',None)        is_confirm=self.request.query_params.get('is_confirm',None)        if not is_confirm or (str(is_confirm)!=1 and str(is_confirm)!=2):            raise PubErrorCustom("确认标识有误！")        where_sql = "{} and t1.is_confirm = %s".format(where_sql)        params.append(is_confirm)        if supplier_id and str(supplier_id) != 'all' and str(supplier_id) != '0':            where_sql = "{} and t2.supplier_id = %s".format(where_sql)            params.append(supplier_id)        if start_dt and end_dt and end_dt >= start_dt:            where_sql = "{} and substr(t1.create_time,1,10) >=%s and substr(t1.create_time,1,10) <=%s ".format(where_sql)            params.append(start_dt)            params.append(end_dt)        self.payquery(where_sql,params)        return {'data':SettlementListPaySerializer(self.data,many=True).data}    @list_route(methods=['PUT'])    @Core_connector(transaction=True)    def confirm(self,request,*args,**kwargs):        pk=self.request.query_params.get('paycodes')        SettlementList.objects.filter(paycode__in=pk).update(is_confirm=1)        return []    @list_route(methods=['PUT'])    @Core_connector(transaction=True)    def cancel_confirm(self,request,*args,**kwargs):        pk=self.request.query_params.get('paycodes')        SettlementList.objects.filter(paycode__in=pk).update(is_confirm=2)        return []    @list_route(methods=['DELETE'])    @Core_connector(transaction=True)    def paydel(self,request,*args,**kwargs):        pk=self.request.data.get('paycodes')        obj=SettlementList.objects.filter(paycode__in=pk)        if obj.exists():            for item in obj:                if item.is_confirm==1:                    raise PubErrorCustom("{}已确认，不能删除！".format(item.paycode))            tmp=list_map_reduce(obj,'setcode','pay_amount')            settlement=Settlement.objects.filter(setcode__in=[ item.keys()[0] for item in tmp])            if settlement.exists():                for settlement_item in settlement:                    for item in tmp:                        if item.keys()[0]==settlement_item.setcode:                            settlement_item.settlement_amount += item[item.keys()[0]]                            settlement_item.pay_amount -= item[item.keys()[0]]                            settlement_item.is_settlement = 2                            break                settlement_item.save()        return []