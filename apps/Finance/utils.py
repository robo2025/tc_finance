from decimal import Decimalfrom FSys.config.extra import ORDER_API_HOSTfrom core.http.request import send_requestfrom utils.exceptions import PubErrorCustomfrom utils.cal import time_consumingfrom apps.Finance.order_model import (					Receipt)from apps.Finance.plan_model import (					PlanReceipt)from apps.Finance.models import (					FReceiptListDetail,					FReceiptList,					FReceipt,                    StatementDetail)from apps.Finance.Custom.serializers import (                    FReceiptListDetailSerializer,                    FReceiptSerializer)def set_receiptl_info(request,in_receipt=None,flag=2):    if not in_receipt:        raise PubErrorCustom("请勾选数据！")    title=None    goods_merge_object={}    receipt=FReceipt()    receipt_list_details=[]    for k,item in in_receipt.items():        if not title:            data=send_request(url="{}/api/finance".format(ORDER_API_HOST),token=request.META.get('HTTP_AUTHORIZATION'),method='POST',data={'finance_type':1})            if not data[0]:                raise PubErrorCustom("获取发票编号错误！")            receipt.receipt_sn = data[1]['ticket_id']            receipt.guest_company_name = item.receipt.guest_company_name            receipt.tax_number = item.receipt.tax_number            receipt.receipt_type = item.receipt.receipt_type            receipt.receipt_title=item.receipt.title            receipt.receipt_addr=item.receipt.company_address            receipt.receipt_mobile=item.receipt.telephone            receipt.receipt_bank=item.receipt.bank            receipt.receipt_account=item.receipt.account            receipt.flag=flag        else:            if title!=item.receipt.title:                raise PubErrorCustom("发票抬头不同,请重新选择！")        receipt_list_detail=FReceiptListDetail()        receipt_list_detail.receipt_sn=receipt.receipt_sn        receipt_list_detail.order_code=item.receipt.order_code        receipt_list_detail.goods_sn=item.goods_sn        receipt_list_detail.goods_name=item.goods_name        receipt_list_detail.model=item.model        receipt_list_detail.unit=item.unit        receipt_list_detail.number=item.number        receipt_list_detail.price=item.price        receipt_list_detail.goods_money=item.pay_total        receipt_list_detail.commission=item.commission        receipt_list_detail.receipt_money=item.commission        receipt_list_detail.flag=flag        receipt_list_detail.save()        receipt_list_details.append(receipt_list_detail)        key=item.rest_type        if key not in goods_merge_object.keys():            goods_merge_object[key]=dict()            goods_merge_object[key]['receipt_sn']=receipt.receipt_sn            goods_merge_object[key]['goods_sn'] = receipt_list_detail.goods_sn            goods_merge_object[key]['goods_name'] = receipt_list_detail.goods_name            goods_merge_object[key]['unit'] = receipt_list_detail.unit            goods_merge_object[key]['number'] = receipt_list_detail.number            goods_merge_object[key]['model'] = receipt_list_detail.model            goods_merge_object[key]['price'] = receipt_list_detail.price            goods_merge_object[key]['flag'] = receipt_list_detail.flag            goods_merge_object[key]['rate'] = Decimal(0.16)            goods_merge_object[key]['money'] = receipt_list_detail.receipt_money            tax = abs(goods_merge_object[key]['money']) * goods_merge_object[key]['rate']            if  goods_merge_object[key]['money']<0:                goods_merge_object[key]['taxfree_money'] = Decimal(0.0)- (abs(goods_merge_object[key]['money']) -  tax)                goods_merge_object[key]['tax_money']   = Decimal(0.0)-tax                goods_merge_object[key]['total_money'] = goods_merge_object[key]['taxfree_money'] + goods_merge_object[key]['tax_money']            else:                goods_merge_object[key]['taxfree_money'] = goods_merge_object[key]['money'] - tax                goods_merge_object[key]['tax_money'] =  tax                goods_merge_object[key]['total_money'] = goods_merge_object[key]['taxfree_money'] + goods_merge_object[key]['tax_money']        else:            money = receipt_list_detail.receipt_money            tax = abs(money) * goods_merge_object[key]['rate']            if  money<0:                tax   = Decimal(0.0)-tax                notax = Decimal(0.0)- (abs(money) -  tax)                ticket_money = notax + tax            else:                notax = money - tax                tax =  tax                ticket_money = notax + tax            goods_merge_object[key]['money'] += money            goods_merge_object[key]['taxfree_money'] += notax            goods_merge_object[key]['tax_money'] +=  tax            goods_merge_object[key]['total_money'] += ticket_money        title=item.receipt.title    goods_merge_list=[]    receipt.receipt_money = Decimal(receipt.receipt_money)    receipt.goods_money = Decimal(receipt.goods_money)    for  key,value in goods_merge_object.items():        value.pop('money')        goods_merge_list.append(value)        receipt_list=FReceiptList.objects.create(**value)        receipt.receipt_money += receipt_list.total_money        receipt.goods_money += receipt_list.total_money    receipt.save()        return {                'title':FReceiptSerializer(receipt,many=False).data,                'goods_merge':goods_merge_list,                'goods':FReceiptListDetailSerializer(receipt_list_details,many=True).data,            }@time_consumingdef noticket_query(where_sql="",params=[]):    """        未出票查询        :return:  statement    """    print(params)    print(where_sql)    statement = StatementDetail.objects.raw("""	    SELECT  t1.*,t1.id as statementdetail_ptr_id,t2.limit,	            t1.use_code as use_code	    FROM  statementdetail t1	    INNER JOIN  statement t2  ON  t1.code=t2.code and t2.status=4	    WHERE t1.use_code not in	    	(  select order_code from receiptlistdetail where receipt_sn in	    		(select receipt_sn from receipt where receipt_status=2 and flag=2) and flag=2	    	)  {}	 """.format(where_sql),params)    return list(statement)@time_consumingdef yesticket_query(where_sql="",params=[]):    """        已出票查询        :return:  statement    """    print(params)    print(where_sql)    statement = StatementDetail.objects.raw("""	    SELECT  t1.*,t1.id as statementdetail_ptr_id,t2.limit,t3.commission as commission1,	            t1.use_code as use_code	    FROM  statementdetail t1	    INNER JOIN  statement t2  ON  t1.code=t2.code and t2.status=4	    INNER JOIN  receiptlistdetail t3 ON t1.use_code=t3.order_code and t3.flag=2 and	        t3.receipt_sn in (select receipt_sn from receipt where receipt_status=2 and flag=2)	    WHERE 1=1 {}	 """.format(where_sql),params)    return list(statement)@time_consumingdef yes_ticket_ready(where_sql="",params=[]):    """        已开票准备查询        :return:  statement    """    print(params)    print(where_sql)    statement = StatementDetail.objects.raw("""	    SELECT  t1.*,t1.id as statementdetail_ptr_id,t2.limit,t3.commission as commission1,	            t1.use_code as use_code	    FROM  statementdetail t1	    INNER JOIN  statement t2  ON  t1.code=t2.code and t2.status=4	    INNER JOIN  receiptlistdetail t3 ON t1.use_code=t3.order_code and t3.flag=2 and	        t3.receipt_sn in (select receipt_sn from receipt where receipt_status=1 and flag=2)  {}	 """.format(where_sql),params)    return list(statement)def get_FA_DD_TH(orders):    FA=[]    DD=[]    TH=[]    for item in orders:        if item[:2] == 'FA':            FA.append(item)        elif item[:2] == 'DD':            DD.append(item)        elif item[:2] == 'TH':            TH.append(item)        else:            raise PubErrorCustom("订单号有误！")    return FA,DD,TH@time_consumingdef run_FA_DD_TH(orders=[]):    FA,DD,TH=get_FA_DD_TH(orders)    FA = [item for item in FA if item in orders]    DD = [item for item in DD if item in orders]    TH = [item for item in TH if item in orders]        if len(FA):        FA = PlanReceipt.objects.using('plan_order').raw("""            SELECT t1.id as receipt_ptr_id,t1.*,t2.plan_sn as order_code,t2.guest_company_name            FROM receipt as t1            INNER JOIN plan_order as t2 ON t1.id=t2.receipt_id            WHERE t2.plan_sn in %s        """, [FA])    if len(DD):        DD = Receipt.objects.using('order').raw("""            SELECT t1.id as receipt_ptr_id,t1.*,t3.son_order_sn as order_code,t3.guest_company_name            FROM receipt as t1            INNER JOIN `order` as t2 ON t1.id = t2.receipt            INNER JOIN `order_detail` as t3 ON t2.id = t3.`order`            WHERE t3.son_order_sn in %s        """, [DD])    if len(TH):        TH = Receipt.objects.using('order').raw("""            SELECT t1.id as receipt_ptr_id,t1.*,t4.returns_sn as order_code,t3.guest_company_name            FROM receipt as t1            INNER JOIN `order` as t2 ON t1.id = t2.receipt            INNER JOIN `order_detail` as t3 ON t2.id = t3.`order`            INNER JOIN `order_returns` as t4 ON t3.son_order_sn=t4.order_sn            WHERE t4.returns_sn in %s        """, [TH])    return list(FA),list(DD),list(TH)