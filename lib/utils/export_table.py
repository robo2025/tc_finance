from .exceptions import PubErrorCustomfrom openpyxl import Workbookimport uuidfrom Finance.Custom.export_data import export_rulefrom FSys.settings import BASE_DIRclass table_export:    def trade_condit(self):        rulecode=str(self).split(' ')[0].split('.')[3]        assert rulecode , "系统异常！"        rule_object=None        is_find=False        for key in export_rule:            if is_find:                break            elif key!=rulecode:                continue            else:                for key1 in export_rule[key]:                    if key1=="1==1":                        rule_object = export_rule[key][key1]                        is_find=True                        break                    else:                        if len(key1.split('.'))>1:                            try:                                bool=eval(key1)                            except NameError as e:                                bool=False                            if not bool:                                continue                        else:                            k=key1.split('==')[0]                            v=str(self.request.query_params.get(k, None))                            exec("%s = %s"%(k,v))                            try:                                bool=eval(key1)                            except NameError as e:                                bool = False                            if not bool:                                continue                        rule_object=export_rule[key][key1]                        is_find=True                        break        return rule_object    def item_check_key(key,value,key1):        key1_arry=key1.split('.')        for i, key1 in enumerate(key1_arry):            if key1!=key:                return False            if i>0:                if key1 not in value[key]:                    return False                else:                    value=value[key]                    key=key1        return True    def get_object_data(self,data,rule_object):        table_value=[]        for data_item in data:            export_data = []            for rule_item in rule_object:                for key in data_item.keys():                    try:                        if not table_export.item_check_key(key,data_item,rule_item['field']):                            continue                        t = "data_item"                        for i in rule_item['field'].split('.'):                            t += "['%s']" % (i)                        if 'func' in rule_item:                            export_data.append(rule_item['func'](eval(t)))                        else:                            export_data.append(eval(t))                            break                    except KeyError as e:                        continue                    except NameError as e:                        continue            table_value.append(export_data)        return table_value    def export(self,data,request):        export_flag=request.query_params.get("export", False)        if str(export_flag)!='1':            return data        rule_object=table_export.trade_condit(self)        if not rule_object:            raise PubErrorCustom("不能匹配导出规则！")        title=[]        table_value=[]        if isinstance(rule_object,dict):            for key in rule_object:                title.append( [ item['field_name'] for item in rule_object[key] ])                print(title)        else:            title.append([ item['field_name'] for item in rule_object ])        if isinstance(rule_object, dict):            for key in rule_object:                if isinstance(data[key],dict):                    data_tmp = [data[key]]                else:                    data_tmp=data[key]                a=table_export.get_object_data(self,data_tmp,rule_object[key])                table_value.append(a)        else:            table_value.append(table_export.get_object_data(self, data, rule_object))        execl_work = Workbook()        execl = execl_work.active        execl.title = "data"        for i in range(len(title)):            execl.append(title[i])            [execl.append(item) for item in table_value[i]]            execl.append([])            execl.append([])        filename="/media/%s.xlsx"%(str(uuid.uuid1()))        execl_work.save(filename = "%s%s"%(BASE_DIR,filename))        return {'url':filename.split('.')[0]}